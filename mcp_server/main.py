# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:11:43+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    BaseSecurity,
    OAuth2PasswordBearer,
    UnsuportedSecurityStub,
)
from pydantic import conint

from models import (
    AppType,
    NADeviceListResponse,
    NAHealthyHomeCoachDataResponse,
    NAMeasureResponse,
    NANewScheduleResponse,
    NAOkResponse,
    NAPartnerDevicesResponse,
    NAPublicDataResponse,
    NAStationDataResponse,
    NAThermostatDataResponse,
    NAThermStateResponse,
    NAUserResponse,
    NAWelcomeEventResponse,
    NAWelcomeHomeDataResponse,
    NAWelcomePersonsAwayResponse,
    NAWelcomePersonsHomeResponse,
    NAWelcomeWebhookResponse,
    RequiredData,
    Scale,
    SetpointMode,
    Type1,
)

app = MCPProxy(
    contact={'email': 'contact-api@netatmo.com', 'name': 'Netatmo'},
    description='<h3>Welcome to the Netatmo swagger on-line documentation !</h3>\nThis site is a complement to the official <a href="https://dev.netatmo.com/">Netatmo developper documentation</a> using swagger to bring interactivity and easy testing of requests with the "try it" button (authenticate with the authorization code OAuth2 flow by clicking the authenticate button in the methods). You can find the source code for this site can be found in the project <a href="https://github.com/cbornet/netatmo-swagger-ui">netatmo-swagger-ui</a>. You can also use the online <a href="./swagger.json">swagger declaration</a> file to generate code or static documentation (see <a href="https://github.com/cbornet/netatmo-swagger-api">netatmo-swagger-api</a>).\n',
    license={
        'name': 'Netatmo : Terms of Service',
        'url': 'https://dev.netatmo.com/dev/resources/legal/introduction',
    },
    termsOfService='https://dev.netatmo.com/dev/resources/legal/introduction',
    title='Netatmo',
    version='1.1.5',
    servers=[{'url': 'https://api.netatmo.net/api'}],
)


@app.get(
    '/addwebhook',
    description=""" Links a callback url to a user.
 """,
    tags=['webhook_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def addwebhook(url: str, app_type: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createnewschedule',
    description=""" The method createnewschedule creates a new schedule stored in the backup list. """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def createnewschedule(device_id: str, module_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/devicelist',
    description=""" The method devicelist returns the list of devices owned by the user, and their modules.
A device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id.
 """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def devicelist(
    app_type: Optional[AppType] = None,
    device_id: Optional[str] = None,
    get_favorites: Optional[bool] = False,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dropwebhook',
    description=""" Dissociates a webhook from a user.
 """,
    tags=['webhook_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def dropwebhook(app_type: str):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getcamerapicture',
    description=""" Returns the snapshot associated to an event.
 """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getcamerapicture(image_id: str, key: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/geteventsuntil',
    description=""" Returns the snapshot associated to an event.
 """,
    tags=['home_event_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def geteventsuntil(home_id: str, event_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gethomecoachsdata',
    description=""" The method gethomecoachsdata Returns data from a user Healthy Home Coach Station (measures and device specific data). """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def gethomecoachsdata(device_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/gethomedata',
    description=""" Returns information about users homes and cameras.
 """,
    tags=['home_event_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def gethomedata(home_id: Optional[str] = None, size: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getlasteventof',
    description=""" Returns most recent events.
 """,
    tags=['home_event_management', 'user_profile_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getlasteventof(home_id: str, person_id: str = ..., offset: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getmeasure',
    description=""" The method getmeasure returns the measurements of a device or a module.
 """,
    tags=['device_data_retrieval', 'measurement_data_collection'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getmeasure(
    device_id: str,
    module_id: Optional[str] = None,
    scale: Scale = ...,
    type: Type1 = ...,
    date_begin: Optional[int] = None,
    date_end: Optional[str] = None,
    limit: Optional[conint(le=1024)] = None,
    optimize: Optional[bool] = None,
    real_time: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getnextevents',
    description=""" Returns previous events.
 """,
    tags=['home_event_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getnextevents(home_id: str, event_id: str = ..., size: Optional[int] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getpublicdata',
    description=""" Retrieves publicly shared weather data from Outdoor Modules within a predefined area. """,
    tags=['geolocation_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getpublicdata(
    lat_ne: int,
    lon_ne: int = ...,
    lat_sw: int = ...,
    lon_sw: int = ...,
    required_data: Optional[RequiredData] = None,
    filter: Optional[bool] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getstationsdata',
    description=""" The method getstationsdata Returns data from a user's Weather Stations (measures and device specific data). """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getstationsdata(
    device_id: Optional[str] = None, get_favorites: Optional[bool] = False
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getthermostatsdata',
    description=""" The method getthermostatsdata returns information about user's thermostats such as their last measurements. """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getthermostatsdata(device_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getthermstate',
    description=""" The method getthermstate returns the last Thermostat measurements, its current weekly schedule, and, if present, its current manual temperature setpoint. """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getthermstate(device_id: str, module_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getuser',
    description=""" The method getuser returns information about a user such as prefered language, prefered units, and list of devices.
 """,
    tags=[
        'webhook_management',
        'schedule_management',
        'device_data_retrieval',
        'home_event_management',
        'user_profile_retrieval',
        'thermostat_settings_control',
        'measurement_data_collection',
        'geolocation_data_retrieval',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def getuser():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/partnerdevices',
    description=""" The method partnerdevices returns the list of device_id to which your partner application has access to. """,
    tags=['webhook_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def partnerdevices():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setpersonsaway',
    description=""" Sets a person as 'Away' or the Home as 'Empty'. The event will be added to the user’s timeline.
 """,
    tags=['home_event_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def setpersonsaway(home_id: str, person_id: Optional[str] = None):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setpersonshome',
    description=""" Sets a person as 'At home'.
 """,
    tags=['home_event_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def setpersonshome(home_id: str, person_ids: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setthermpoint',
    description=""" The method setthermpoint changes the Thermostat manual temperature setpoint. """,
    tags=['thermostat_settings_control', 'schedule_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def setthermpoint(
    device_id: str,
    module_id: str = ...,
    setpoint_mode: SetpointMode = ...,
    setpoint_endtime: Optional[int] = None,
    setpoint_temp: Optional[float] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/switchschedule',
    description=""" The method switchschedule switches the Thermostat's schedule to another existing schedule. """,
    tags=['schedule_management', 'device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def switchschedule(device_id: str, module_id: str = ..., schedule_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/syncschedule',
    description=""" The method syncschedule changes the Thermostat weekly schedule. """,
    tags=['device_data_retrieval'],
    security=[
        UnsuportedSecurityStub(name="None"),
        OAuth2PasswordBearer(
            name="None",
            token_url="https://api.netatmo.net/api/https://api.netatmo.net/oauth2/token",
        ),
    ],
)
def syncschedule(device_id: str, module_id: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
