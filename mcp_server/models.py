# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:11:43+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class NADashboardData(BaseModel):
    AbsolutePressure: Optional[float] = Field(
        None, description='Real measured pressure @ time_utc (in mb)'
    )
    BoilerOff: Optional[int] = None
    BoilerOn: Optional[int] = None
    CO2: Optional[float] = Field(
        None, description='Last Co2 measured @ time_utc (in ppm)'
    )
    GustAngle: Optional[int] = Field(
        None, description='Direction of the last 5 min highest gust wind'
    )
    GustStrength: Optional[int] = Field(
        None, description='Speed of the last 5 min highest gust wind'
    )
    Humidity: Optional[float] = Field(
        None, description='Last humidity measured @ time_utc (in %)'
    )
    Noise: Optional[float] = Field(
        None, description='Last noise measured @ time_utc (in db)'
    )
    Pressure: Optional[float] = Field(
        None, description='Last Sea level pressure measured @ time_utc (in mb)'
    )
    Rain: Optional[float] = Field(None, description='Last rain measured (in mm)')
    Temperature: Optional[float] = Field(
        None, description='Last temperature measure @ time_utc (in °C)'
    )
    WindAngle: Optional[int] = Field(
        None,
        description='Current 5 min average wind direction measured @ time_utc (in °)',
    )
    WindStrength: Optional[int] = Field(
        None,
        description='Current 5 min average wind speed measured @ time_utc (in km/h)',
    )
    date_max_temp: Optional[int] = Field(
        None, description='Timestamp when max temperature was measured'
    )
    date_max_wind_str: Optional[int] = Field(
        None, description='Timestamp when max wind strength was measured'
    )
    date_min_temp: Optional[int] = Field(
        None, description='Timestamp when min temperature was measured'
    )
    device_id: Optional[float] = None
    health_idx: Optional[int] = Field(
        None,
        description='Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy',
    )
    max_temp: Optional[float] = Field(
        None, description='Min temperature of the day (measured @ date_min_temp)'
    )
    max_wind_str: Optional[int] = None
    min_temp: Optional[float] = Field(
        None, description='Max temperature of the day (measured @ date_max_temp)'
    )
    pressure_trend: Optional[str] = Field(None, description='Pressure evolution trend')
    sum_rain_1: Optional[float] = Field(None, description='Amount of rain in last hour')
    sum_rain_24: Optional[float] = Field(None, description='Amount of rain today')
    temp_trend: Optional[str] = Field(None, description='Temperature evolution trend')
    time_utc: Optional[int] = None


class NADate(BaseModel):
    sec: Optional[int] = None
    usec: Optional[int] = None


class NAHeatingSystem(BaseModel):
    heating_energy: Optional[str] = None
    heating_system_window_seen: Optional[bool] = None


class NAHouseModelCa(BaseModel):
    so: Optional[str] = None
    te: Optional[float] = None
    ti: Optional[int] = None


class NALinkStation(BaseModel):
    Temperature: Optional[float] = None
    ext: Optional[str] = None
    mac: Optional[str] = None


class NAMeasure(BaseModel):
    gust_angle: Optional[float] = None
    gust_strength: Optional[float] = None
    rain_24h: Optional[float] = None
    rain_60min: Optional[float] = None
    rain_live: Optional[float] = None
    rain_utc: Optional[int] = None
    res: Optional[Any] = None
    type: Optional[List[str]] = None
    wind_angle: Optional[float] = None
    wind_strength: Optional[float] = None
    wind_timeutc_: Optional[int] = Field(None, alias='wind_timeutc"')


class NAMeasureBodyElem(BaseModel):
    beg_time: Optional[int] = None
    step_time: Optional[int] = None
    value: Optional[List[List[float]]] = None


class NAMeasureResponse(BaseModel):
    body: Optional[List[NAMeasureBodyElem]] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAModule(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    battery_percent: Optional[int] = Field(
        None, description='It contains the current battery level in percentage.'
    )
    battery_vp: Optional[int] = Field(
        None,
        description='It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n"Indoor module Battery range: 6000 ... 4200" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n"Below 4560: very low" |\n    \n"Raingauge and outdoor module Battery range: 6000 ... 3600" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n"Below 4000: very low" |\n    \n"Thermostat Battery range: 4500 ... 3000" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n"Below 3000: very low"\n',
    )
    dashboard_data: Optional[NADashboardData] = None
    data_type: Optional[List[str]] = None
    date_setup: Optional[NADate] = None
    firmware: Optional[int] = None
    last_message: Optional[int] = None
    last_seen: Optional[int] = None
    main_device: Optional[str] = None
    module_name: Optional[str] = None
    public_ext_data: Optional[bool] = None
    rf_status: Optional[int] = Field(
        None,
        description='"It contains the current radio status. The different thresholds to take into account are :" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60\n',
    )
    therm_orientation: Optional[int] = None
    therm_relay_cmd: Optional[int] = None
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module\n',
    )


class NANewScheduleBody(BaseModel):
    schedule_id: Optional[str] = Field(
        None,
        description='Id of the schedule. It can be use with the method "switchschedule" \n',
    )


class NANewScheduleResponse(BaseModel):
    body: Optional[NANewScheduleBody] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAObject(BaseModel):
    field_id: Optional[str] = Field(None, alias='$id')


class NAOkResponse(BaseModel):
    body: Optional[str] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAPartnerDevicesResponse(BaseModel):
    body: Optional[List[str]] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAPidAlgo(BaseModel):
    gain: Optional[int] = None
    period: Optional[int] = None
    td: Optional[int] = None
    ti: Optional[int] = None


class NAPlace(BaseModel):
    altitude: Optional[float] = None
    city: Optional[str] = None
    country: Optional[str] = None
    from_ip: Optional[bool] = None
    improveLocProposed: Optional[bool] = None
    location: Optional[List[float]] = None
    timezone: Optional[str] = None
    trust_location: Optional[bool] = None


class NAPublicData(BaseModel):
    field_id: Optional[str] = Field(
        None,
        alias='_id',
        description='id of the station',
        examples=['70:ee:50:09:f0:xx'],
    )
    mark: Optional[int] = None
    measures: Optional[Dict[str, NAMeasure]] = None
    module_types: Optional[Dict[str, str]] = Field(
        None, description='Latest measurements of the station, organized by module'
    )
    modules: Optional[List[str]] = None
    place: Optional[NAPlace] = None


class NAPublicDataResponse(BaseModel):
    body: Optional[List[NAPublicData]] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NASetpoint(BaseModel):
    setpoint_endtime: Optional[int] = None
    setpoint_mode: Optional[str] = None
    setpoint_temp: Optional[float] = None


class NASetpointLog(BaseModel):
    setpoint: Optional[NASetpoint] = None
    timestamp: Optional[int] = None


class NASimpleAlgo(BaseModel):
    high_deadband: Optional[int] = None


class NAStation(BaseModel):
    lag_down: Optional[int] = None
    lag_up: Optional[int] = None
    off_overshoot: Optional[float] = None
    on_overshoot: Optional[float] = None
    pk: Optional[int] = None
    tau: Optional[int] = None


class NAStationModule(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    battery_percent: Optional[int] = Field(
        None, description='It contains the current battery level in percentage.'
    )
    battery_vp: Optional[int] = Field(
        None,
        description='It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n"Indoor module Battery range: 6000 ... 4200" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n"Below 4560: very low" |\n    \n"Raingauge and outdoor module Battery range: 6000 ... 3600" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n"Below 4000: very low" |\n    \n"Thermostat Battery range: 4500 ... 3000" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n"Below 3000: very low"\n',
    )
    dashboard_data: Optional[NADashboardData] = None
    data_type: Optional[List[str]] = None
    firmware: Optional[int] = None
    last_message: Optional[int] = None
    last_seen: Optional[int] = None
    last_setup: Optional[int] = None
    module_name: Optional[str] = None
    reachable: Optional[bool] = Field(
        None,
        description='true when the station was seen by the Netatmo cloud within the last 4 hours',
    )
    rf_status: Optional[int] = Field(
        None,
        description='"It contains the current radio status. The different thresholds to take into account are :" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60\n',
    )
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module\n',
    )


class NAThermMeasure(BaseModel):
    setpoint_temp: Optional[float] = None
    temperature: Optional[float] = None
    time: Optional[int] = None


class NATimeTableItem(BaseModel):
    id: Optional[int] = None
    m_offset: Optional[int] = None


class NAUserAdministrative(BaseModel):
    country: Optional[str] = Field(None, description='user country')
    feel_like_algo: Optional[str] = Field(
        None,
        description='algorithm used to compute feel like temperature, 0 -> humidex, 1 -> heat-index',
    )
    lang: Optional[str] = Field(None, description='user locale')
    pressureunit: Optional[str] = Field(
        None, description='0 -> mbar, 1 -> inHg, 2 -> mmHg'
    )
    reg_locale: Optional[str] = Field(
        None, description='user regional preferences (used for displaying date)'
    )
    unit: Optional[str] = Field(
        None, description='0 -> metric system, 1 -> imperial system'
    )
    windunit: Optional[str] = Field(
        None, description='0 -> kph, 1 -> mph, 2 -> ms, 3 -> beaufort, 4 -> knot'
    )


class LightModeStatus(Enum):
    on = 'on'
    off = 'off'
    auto = 'auto'


class NAWelcomeCamera(BaseModel):
    alim_status: Optional[str] = Field(
        None, description='If power supply is ok (on/off)'
    )
    id: Optional[str] = Field(None, description='Id of the camera')
    is_local: Optional[bool] = Field(
        None,
        description='Only for scope access_camera. If Camera and application requesting the information are on the same IP (true/false)',
    )
    light_mode_status: Optional[LightModeStatus] = Field(
        None, description='State of (flood-)light'
    )
    name: Optional[str] = Field(None, description='Name of the camera')
    sd_status: Optional[str] = Field(
        None, description='If SD card status is ok (on/off)'
    )
    status: Optional[str] = Field(None, description='If camera is monitoring (on/off)')
    type: Optional[str] = Field(None, description='Type of the camera')
    vpn_url: Optional[str] = Field(
        None, description='Only for scope access_camera. Address of the camera'
    )


class Category(Enum):
    human = 'human'
    animal = 'animal'
    vehicle = 'vehicle'


class NAWelcomeFace(BaseModel):
    id: Optional[str] = Field(None, description='Id of the face.')
    key: Optional[str] = Field(
        None, description='Key for this face to use in getcamerapicture.'
    )
    version: Optional[int] = Field(
        None, description='Version of the face if user changed their photo.'
    )


class NAWelcomeGlobalInfo(BaseModel):
    show_tags: Optional[bool] = Field(None, description='show tags')


class NAWelcomeModule(BaseModel):
    battery_percent: Optional[int] = Field(
        None, description='remaining battery percentage'
    )
    id: Optional[str] = Field(None, description='mac address of the module')
    last_activity: Optional[int] = Field(
        None, description='Timestamp of last move detected by the module'
    )
    name: Optional[str] = Field(
        None, description='name of the module (given by the user)'
    )
    rf: Optional[str] = Field(None, description='Radio status')
    status: Optional[str] = Field(None, description='status of the module')
    type: Optional[str] = Field(None, description='NACamDoorTag for tags')


class NAWelcomePerson(BaseModel):
    face: Optional[NAWelcomeFace] = None
    id: Optional[str] = Field(None, description='Id of the person.')
    last_seen: Optional[int] = Field(
        None, description='Time at which the person was last seen.'
    )
    out_of_sight: Optional[bool] = Field(
        None, description='True if the Person is out of sight.'
    )
    pseudo: Optional[str] = Field(
        None, description='Name of the person, if pseudo is missing, person is unknown.'
    )


class NAWelcomePersonsAwayResponse(BaseModel):
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAWelcomePersonsHomeResponse(BaseModel):
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAWelcomePlace(BaseModel):
    city: Optional[str] = Field(None, description='City of the home.')
    country: Optional[str] = Field(None, description='Country of the home.')
    timezone: Optional[str] = Field(None, description='Timezone of the home.')


class NAWelcomeSnapshot(BaseModel):
    id: Optional[str] = Field(None, description='Id of the snapshot.')
    key: Optional[str] = Field(None, description='Key for this snapshot.')
    version: Optional[int] = Field(None, description='Version of the snapshot.')


class Type(Enum):
    human = 'human'
    animal = 'animal'
    vehicle = 'vehicle'


class NAWelcomeSubEvent(BaseModel):
    id: Optional[str] = Field(None, description='Identifier of the sub event')
    message: Optional[str] = Field(
        None, description='User facing sub event description'
    )
    offset: Optional[int] = None
    snapshot: Optional[NAWelcomeSnapshot] = None
    time: Optional[int] = Field(None, description='Time of occurence of the sub event')
    type: Optional[Type] = Field(None, description='Type of the detected object.')


class NAWelcomeUser(BaseModel):
    lang: Optional[str] = Field(None, description='user locale')
    reg_locale: Optional[str] = Field(
        None, description='user regional preferences (used for displaying date)'
    )


class NAWelcomeWebhookResponse(BaseModel):
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None


class NAYearMonth(BaseModel):
    m: Optional[int] = None
    y: Optional[int] = None


class NAZone(BaseModel):
    id: Optional[int] = None
    name: Optional[str] = None
    temp: Optional[float] = None
    type: Optional[int] = None


class AppType(Enum):
    app_thermostat = 'app_thermostat'
    app_station = 'app_station'


class Scale(Enum):
    max = 'max'
    field_30min = '30min'
    field_1hour = '1hour'
    field_3hours = '3hours'
    field_1day = '1day'
    field_1week = '1week'
    field_1month = '1month'


class TypeEnum(Enum):
    Temperature = 'Temperature'
    CO2 = 'CO2'
    Humidity = 'Humidity'
    Pressure = 'Pressure'
    Noise = 'Noise'
    Rain = 'Rain'
    WindStrength = 'WindStrength'
    WindAngle = 'WindAngle'
    Guststrength = 'Guststrength'
    GustAngle = 'GustAngle'
    Sp_Temperature = 'Sp_Temperature'
    BoilerOn = 'BoilerOn'
    BoilerOff = 'BoilerOff'
    min_temp = 'min_temp'
    date_min_temp = 'date_min_temp'
    max_temp = 'max_temp'
    date_max_temp = 'date_max_temp'
    min_hum = 'min_hum'
    date_min_hum = 'date_min_hum'
    max_hum = 'max_hum'
    date_max_hum = 'date_max_hum'
    min_pressure = 'min_pressure'
    date_min_pressure = 'date_min_pressure'
    max_pressure = 'max_pressure'
    date_max_pressure = 'date_max_pressure'
    min_noise = 'min_noise'
    date_min_noise = 'date_min_noise'
    max_noise = 'max_noise'
    date_max_noise = 'date_max_noise'
    date_min_co2 = 'date_min_co2'
    date_max_co2 = 'date_max_co2'
    date_max_gust = 'date_max_gust'
    sum_rain = 'sum_rain'
    sum_boiler_on = 'sum_boiler_on'
    sum_boiler_off = 'sum_boiler_off'


class Type1(RootModel[List[TypeEnum]]):
    root: List[TypeEnum]


class RequiredDatum(Enum):
    temperature = 'temperature'
    humidity = 'humidity'
    pressure = 'pressure'
    wind = 'wind'
    rain = 'rain'


class RequiredData(RootModel[List[RequiredDatum]]):
    root: List[RequiredDatum]


class SetpointMode(Enum):
    program = 'program'
    away = 'away'
    hg = 'hg'
    manual = 'manual'
    off = 'off'
    max = 'max'


class NAHealthyHomeCoach(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    cipher_id: Optional[str] = None
    co2_calibrating: Optional[bool] = None
    dashboard_data: Optional[NADashboardData] = None
    data_type: Optional[List[str]] = None
    date_setup: Optional[int] = None
    firmware: Optional[int] = None
    last_setup: Optional[int] = None
    last_status_store: Optional[int] = None
    last_upgrade: Optional[int] = None
    name: Optional[str] = None
    place: Optional[NAPlace] = None
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNHC: Healthy Home Coach\n',
    )
    wifi_status: Optional[int] = Field(
        None,
        description='It contains the current wifi status. The different thresholds to take into account are\nRSSI_THRESHOLD_0 = 86 bad signal\nRSSI_THRESHOLD_1 = 71 middle quality signal\nRSSI_THRESHOLD_2 = 56 good signal\n',
    )


class NAHouseModel(BaseModel):
    algo_type: Optional[str] = None
    ca: Optional[NAHouseModelCa] = None
    ext_temps: Optional[Dict[str, int]] = None
    first_anticipate_avail: Optional[bool] = None
    first_pid_avail: Optional[bool] = None
    gefs: Optional[NAStation] = None
    in_use: Optional[str] = None
    last_compute_try: Optional[NADate] = None
    link_station: Optional[NALinkStation] = None
    pid_algo: Optional[NAPidAlgo] = None
    prefered_algo_type: Optional[str] = None
    simple_algo: Optional[NASimpleAlgo] = None
    station: Optional[NAStation] = None
    station_firsttime_anticipate: Optional[bool] = None
    time: Optional[NADate] = None
    time_algo_changed: Optional[int] = None
    time_pid_computed: Optional[int] = None


class NAMain(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    cipher_id: Optional[str] = None
    co2_calibrating: Optional[bool] = None
    dashboard_data: Optional[NADashboardData] = None
    data_type: Optional[List[str]] = None
    date_setup: Optional[int] = None
    favorite: Optional[bool] = Field(
        None,
        description='true when the device is a user favorite and not owned by them',
    )
    firmware: Optional[int] = None
    last_setup: Optional[int] = None
    last_status_store: Optional[int] = None
    last_upgrade: Optional[int] = None
    module_name: Optional[str] = None
    modules: Optional[List[NAStationModule]] = None
    place: Optional[NAPlace] = None
    reachable: Optional[bool] = Field(
        None,
        description='true when the station was seen by the Netatmo cloud within the last 4 hours',
    )
    read_only: Optional[bool] = Field(
        None,
        description='true when the user was invited to (or has favorited) a station, false when the user owns it',
    )
    station_name: Optional[str] = None
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module\n',
    )
    wifi_status: Optional[int] = Field(
        None,
        description='It contains the current wifi status. The different thresholds to take into account are\nRSSI_THRESHOLD_0 = 86 bad signal\nRSSI_THRESHOLD_1 = 71 middle quality signal\nRSSI_THRESHOLD_2 = 56 good signal\n',
    )


class NAThermProgram(BaseModel):
    name: Optional[str] = None
    program_id: Optional[str] = None
    selected: Optional[bool] = None
    timetable: Optional[List[NATimeTableItem]] = None
    zones: Optional[List[NAZone]] = None


class NAThermStateBody(BaseModel):
    battery_percent: Optional[int] = Field(
        None, description='It contains the current battery level in percentage.'
    )
    battery_vp: Optional[int] = None
    last_plug_seen: Optional[int] = None
    last_therm_seen: Optional[int] = None
    measured: Optional[NAThermMeasure] = None
    plug_connected_boiler: Optional[int] = None
    rf_status: Optional[int] = None
    setpoint: Optional[NASetpoint] = None
    setpoint_order: Optional[NASetpoint] = None
    therm_orientation: Optional[int] = None
    therm_program: Optional[NAThermProgram] = None
    therm_program_backup: Optional[List[NAThermProgram]] = None
    therm_program_order: Optional[NAThermProgram] = None
    therm_relay_cmd: Optional[int] = None
    udp_conn: Optional[bool] = None
    wifi_status: Optional[int] = None


class NAThermStateResponse(BaseModel):
    body: Optional[NAThermStateBody] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAThermostat(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    battery_percent: Optional[int] = Field(
        None, description='It contains the current battery level in percentage.'
    )
    battery_vp: Optional[int] = Field(
        None,
        description='It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.\n"Indoor module Battery range: 6000 ... 4200" |\nINDOOR_BATTERY_LEVEL_FULL = 5640\nINDOOR_BATTERY_LEVEL_HIGH = 5280\nINDOOR_BATTERY_LEVEL_MEDIUM = 4920\nINDOOR_BATTERY_LEVEL_LOW = 4560\n"Below 4560: very low" |\n    \n"Raingauge and outdoor module Battery range: 6000 ... 3600" |\nBATTERY_LEVEL_FULL = 5500\nBATTERY_LEVEL_HIGH = 5000\nBATTERY_LEVEL_MEDIUM = 4500\nBATTERY_LEVEL_LOW = 4000\n"Below 4000: very low" |\n    \n"Thermostat Battery range: 4500 ... 3000" |\nTHERMOSTAT_BATTERY_LEVEL_FULL = 4100\nTHERMOSTAT_BATTERY_LEVEL_HIGH = 3600\nTHERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\nTHERMOSTAT_BATTERY_LEVEL_LOW = 3000\n"Below 3000: very low"\n',
    )
    firmware: Optional[int] = None
    last_message: Optional[int] = None
    last_therm_seen: Optional[int] = None
    measured: Optional[NAThermMeasure] = None
    module_name: Optional[str] = None
    rf_status: Optional[int] = Field(
        None,
        description='"It contains the current radio status. The different thresholds to take into account are :" |\nRADIO_THRESHOLD_SIGNAL_LOW = 90 \nRADIO_THRESHOLD_SIGNAL_MEDIUM = 80\nRADIO_THRESHOLD_SIGNAL_HIGH = 70\nRADIO_THRESHOLD_SIGNAL_FULL = 60\n',
    )
    setpoint: Optional[NASetpoint] = None
    setpoint_history: Optional[List[NASetpointLog]] = Field(
        None,
        description='The last 20 setpoints (mode, endtime, and timestamp) the thermostats has entered.',
    )
    setpoint_order: Optional[NASetpoint] = None
    therm_orientation: Optional[int] = None
    therm_program_list: Optional[List[NAThermProgram]] = Field(
        None, description='List of the weekly heating planning used by the thermostat'
    )
    therm_relay_cmd: Optional[int] = None
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module\n',
    )


class NAUser(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    administrative: Optional[NAUserAdministrative] = None
    date_creation: Optional[NADate] = None
    devices: Optional[List[str]] = Field(
        None,
        description='An array of string containing the ids of the devices owned by the user',
    )
    friend_devices: Optional[List[str]] = Field(
        None,
        description='An array of string containing the ids of the devices on which the user has a "guest" access\n',
    )
    mail: Optional[str] = None
    timeline_not_read: Optional[int] = None
    timeline_size: Optional[int] = None


class NAUserResponse(BaseModel):
    body: Optional[NAUser] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAWelcomeEvent(BaseModel):
    camera_id: Optional[str] = Field(None, description='Camera that detected the event')
    category: Optional[Category] = Field(
        None, description='Type of the detected object.'
    )
    event_list: Optional[List[NAWelcomeSubEvent]] = None
    id: Optional[str] = Field(None, description='Identifier of the event')
    is_arrival: Optional[bool] = Field(
        None,
        description='If person was considered away before being seen during this event',
    )
    message: Optional[str] = Field(None, description='User facing event description')
    person_id: Optional[str] = Field(
        None, description='Id of the person the event is about (if any)'
    )
    snapshot: Optional[NAWelcomeSnapshot] = None
    sub_type: Optional[int] = Field(
        None,
        description='Subtypes of SD and Alim events. Go to Welcome page for further details.',
    )
    time: Optional[int] = Field(None, description='Time of occurence of event')
    type: Optional[str] = Field(
        None, description='Type of events. Go to the Welcome page for further details.'
    )
    video_id: Optional[str] = Field(None, description='Identifier of the video')
    video_status: Optional[str] = Field(
        None, description='Status of the video (recording, deleted or available)'
    )


class NAWelcomeEventData(BaseModel):
    events_list: Optional[List[NAWelcomeEvent]] = None


class NAWelcomeEventResponse(BaseModel):
    body: Optional[NAWelcomeEventData] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAWelcomeHome(BaseModel):
    cameras: Optional[List[NAWelcomeCamera]] = None
    events: Optional[List[NAWelcomeEvent]] = None
    id: Optional[str] = Field(None, description='Id of the home.')
    modules: Optional[List[NAWelcomeModule]] = None
    name: Optional[str] = Field(None, description='Name of the home')
    persons: Optional[List[NAWelcomePerson]] = None
    place: Optional[NAWelcomePlace] = None


class NAWelcomeHomeData(BaseModel):
    global_info: Optional[NAWelcomeGlobalInfo] = None
    homes: Optional[List[NAWelcomeHome]] = None
    user: Optional[NAWelcomeUser] = None


class NAWelcomeHomeDataResponse(BaseModel):
    body: Optional[NAWelcomeHomeData] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NADevice(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id')
    behavior: Optional[int] = None
    cipher_id: Optional[str] = None
    dashboard_data: Optional[NADashboardData] = None
    data_type: Optional[List[str]] = None
    date_setup: Optional[NADate] = None
    firmware: Optional[int] = None
    first_pid_avail: Optional[bool] = None
    heating_system: Optional[NAHeatingSystem] = None
    house_model: Optional[NAHouseModel] = None
    hw_version: Optional[int] = None
    ip: Optional[str] = None
    last_fw_update: Optional[int] = None
    last_radio_store: Optional[int] = None
    last_status_store: Optional[int] = None
    last_upgrade: Optional[int] = None
    module_name: Optional[str] = None
    modules: Optional[List[str]] = Field(
        None, description='It lists which modules are linked with this device'
    )
    new_feature_avail: Optional[bool] = None
    place: Optional[NAPlace] = None
    public_ext_data: Optional[bool] = None
    setpoint: Optional[Dict[str, Any]] = None
    setpoint_default_duration: Optional[int] = None
    setpoint_order: Optional[Dict[str, List[NAObject]]] = None
    station_name: Optional[str] = None
    therm_program: Optional[Dict[str, NAThermProgram]] = None
    therm_program_backup: Optional[Dict[str, List[NAThermProgram]]] = None
    therm_program_order: Optional[Dict[str, List[NAObject]]] = None
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module\n',
    )
    udp_conn: Optional[bool] = None
    user_owner: Optional[List[str]] = None
    wifi_status: Optional[int] = Field(
        None,
        description='It contains the current wifi status. The different thresholds to take into account are\nRSSI_THRESHOLD_0 = 86 bad signal\nRSSI_THRESHOLD_1 = 71 middle quality signal\nRSSI_THRESHOLD_2 = 56 good signal\n',
    )


class NADeviceListBody(BaseModel):
    devices: Optional[List[NADevice]] = None
    modules: Optional[List[NAModule]] = None


class NADeviceListResponse(BaseModel):
    body: Optional[NADeviceListBody] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAHealthyHomeCoachDataBody(BaseModel):
    devices: Optional[List[NAHealthyHomeCoach]] = None
    user: Optional[NAUser] = None


class NAHealthyHomeCoachDataResponse(BaseModel):
    body: Optional[NAHealthyHomeCoachDataBody] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAPlug(BaseModel):
    field_id: Optional[str] = Field(None, alias='_id', examples=['70:ee:50:09:f0:xx'])
    firmware: Optional[int] = None
    last_bilan: Optional[NAYearMonth] = None
    last_plug_seen: Optional[int] = None
    last_status_store: Optional[int] = None
    modules: Optional[List[NAThermostat]] = None
    place: Optional[NAPlace] = None
    plug_connected_boiler: Optional[int] = None
    station_name: Optional[str] = None
    syncing: Optional[bool] = None
    type: Optional[str] = Field(
        None,
        description='Included in every device or module. It defines the type of the device/module. Its values are among :\nNAMain : for the base station\nNAModule1 : for the outdoor module\nNAModule4 : for the additionnal indoor module\nNAModule3 : for the rain gauge module\nNAPlug : for the thermostat relay/plug\nNATherm1 : for the thermostat module\n',
    )
    udp_conn: Optional[bool] = None
    wifi_status: Optional[int] = Field(
        None,
        description='It contains the current wifi status. The different thresholds to take into account are\nRSSI_THRESHOLD_0 = 86 bad signal\nRSSI_THRESHOLD_1 = 71 middle quality signal\nRSSI_THRESHOLD_2 = 56 good signal\n',
    )


class NAStationDataBody(BaseModel):
    devices: Optional[List[NAMain]] = None
    user: Optional[NAUser] = None


class NAStationDataResponse(BaseModel):
    body: Optional[NAStationDataBody] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None


class NAThermostatDataBody(BaseModel):
    devices: Optional[List[NAPlug]] = None
    user: Optional[NAUser] = None


class NAThermostatDataResponse(BaseModel):
    body: Optional[NAThermostatDataBody] = None
    status: Optional[str] = Field(None, examples=['ok'])
    time_exec: Optional[float] = None
    time_server: Optional[int] = None
